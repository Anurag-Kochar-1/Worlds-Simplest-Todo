---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div
    class="flex flex-col items-center justify-center min-h-screen bg-[#E1E5EA] gap-8 w-full"
  >
    <h1
      id="heading"
      class="!text-6xl !md:text-7xl !lg:text-8xl !xl:text-9xl font-bold text-gray-800 text-center px-4"
    >
      Have you completed your main task today?
    </h1>
    <h2
      id="sub-heading"
      class="!text-4xl !md:text-5xl !lg:text-6xl font-medium text-gray-700 mt-4 mb-10"
    >
      If yes, hold the checkbox below.
    </h2>

    <!-- Checkbox container -->
    <div
      class="relative size-72 cursor-pointer select-none"
      id="checkbox-container"
    >
      <svg class="w-full h-full" viewBox="0 0 100 100">
        <!-- Background rectangle -->
        <rect
          class="fill-none stroke-[#FCFAFE]"
          x="10"
          y="10"
          width="80"
          height="80"
          rx="15"
          stroke-width="8"></rect>

        <!-- Progress rectangle (clips to fill from bottom) -->
        <clipPath id="progress-clip">
          <rect
            id="progress-clip-rect"
            x="10"
            y="90"
            width="80"
            height="0"
            rx="15"></rect>
        </clipPath>

        <!-- Progress fill -->
        <rect
          id="progress-fill"
          class="fill-green-500 opacity-0"
          x="10"
          y="10"
          width="80"
          height="80"
          rx="15"
          clip-path="url(#progress-clip)"></rect>

        <!-- Checkmark -->
        <path
          id="checkmark"
          class="fill-none stroke-white opacity-0 transition-opacity duration-300"
          stroke-width="8"
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M 30 50 L 45 65 L 70 35"></path>
      </svg>
    </div>
  </div>

  <!-- Reset Button -->
  <button
    id="reset-button"
    class="fixed bottom-6 right-6 text-2xl text-gray-700 hover:text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-all duration-200 opacity-0 pointer-events-none z-50"
  >
    Reset
  </button>

  <div class="w-full text-center py-6">
    <a
      target="_blank"
      href="https://x.com/anurag__kochar"
      class="text-centerfont-medium !text-3xl text-blue-500 hover:text-blue-600 underline transition-all duration-150 ease-in font-medium"
      >Follow for more such projects!</a
    >
  </div>

  <style>
    .progress-active {
      opacity: 1 !important;
    }

    .reset-active {
      opacity: 0.5 !important;
      pointer-events: auto !important;
    }

    @keyframes check-animation {
      0% {
        stroke-dashoffset: 100;
      }
      100% {
        stroke-dashoffset: 0;
      }
    }

    #checkmark.animate {
      stroke-dasharray: 100;
      animation: check-animation 0.6s ease forwards;
    }
  </style>

  <script>
    declare const confetti: {
      (options?: {
        particleCount?: number;
        angle?: number;
        spread?: number;
        startVelocity?: number;
        decay?: number;
        gravity?: number;
        drift?: number;
        ticks?: number;
        origin?: {
          x?: number;
          y?: number;
        };
        colors?: string[];
        shapes?: string[];
        scalar?: number;
        zIndex?: number;
        disableForReducedMotion?: boolean;
      }): void;
      reset: () => void;
    };

    function triggerConfetti() {
      const duration = 8000;
      const animationEnd = Date.now() + duration;
      const defaults = {
        startVelocity: 30,
        spread: 360,
        ticks: 60,
        zIndex: 0,
      };

      function randomInRange(min: number, max: number) {
        return Math.random() * (max - min) + min;
      }

      const interval: any = setInterval(function () {
        const timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
          return clearInterval(interval);
        }

        const particleCount = 50 * (timeLeft / duration);

        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.1, 0.9), y: Math.random() - 0.2 },
        });
      }, 250);
    }

    const HOLD_DURATION_MS = 8000;
    const STORAGE_KEY = "todo_completion";

    const PROGRESS_MESSAGES = {
      5: "Take a moment to reflect... Task truly done? ðŸ¤”",
      25: "Your integrity matters more than checkboxes âœ¨",
      50: "Midway point! Celebrating real achievements! ðŸŒŸ",
      75: "The finish line is in sight! Keep going! ðŸ’«",
      90: "About to join today's champions! ðŸ‘‘",
    };

    function getTimeUntilTomorrow() {
      const now = new Date();
      const tomorrow = new Date(now);
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(0, 0, 0, 0);

      const diff = tomorrow.getTime() - now.getTime();

      const hours = Math.floor(diff / (1000 * 60 * 60));
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((diff % (1000 * 60)) / 1000);

      return {
        hours: hours.toString().padStart(2, "0"),
        minutes: minutes.toString().padStart(2, "0"),
        seconds: seconds.toString().padStart(2, "0"),
      };
    }

    class ProgressCheckbox {
      private container: HTMLElement | null;
      private progressClipRect: SVGRectElement | null;
      private progressFill: SVGRectElement | null;
      private checkmark: HTMLElement | null;
      private heading: HTMLElement | null;
      private subHeading: HTMLElement | null;
      private resetButton: HTMLElement | null;
      private isHolding: boolean;
      private isComplete: boolean;
      private startTime: number;
      private animationFrame: null | any;
      private timerInterval: null | any;
      private lastMessageThreshold: number;

      constructor() {
        this.container = document.getElementById("checkbox-container");
        // @ts-ignore
        this.progressClipRect = document.getElementById(
          "progress-clip-rect"
        ) as SVGRectElement;
        // @ts-ignore
        this.progressFill = document.getElementById(
          "progress-fill"
        ) as SVGRectElement;
        this.checkmark = document.getElementById("checkmark");
        this.heading = document.getElementById("heading");
        this.subHeading = document.getElementById("sub-heading");
        this.resetButton = document.getElementById("reset-button");

        this.isHolding = false;
        this.isComplete = false;
        this.startTime = 0;
        this.animationFrame = null;
        this.timerInterval = null;
        this.lastMessageThreshold = 0;

        this.loadState();
        this.init();
      }

      private getStorageKey(): string {
        const today = new Date().toISOString().split("T")[0];
        return `${STORAGE_KEY}_${today}`;
      }

      private loadState() {
        const savedState = localStorage.getItem(this.getStorageKey());
        if (savedState === "completed") {
          this.isComplete = true;
          this.progressFill!.classList.add("progress-active");
          this.progressClipRect!.setAttribute("y", "10");
          this.progressClipRect!.setAttribute("height", "80");
          this.checkmark!.classList.add("progress-active");
          this.heading!.textContent = "Task already completed today! âœ¨";
          this.subHeading!.classList.remove("opacity-0");
          this.startTimer();
          this.showResetButton();
        }
      }

      private saveState() {
        localStorage.setItem(this.getStorageKey(), "completed");
      }

      private startTimer() {
        this.updateTimer();
        this.timerInterval = setInterval(() => this.updateTimer(), 1000);
      }

      private updateTimer() {
        const timeLeft = getTimeUntilTomorrow();
        this.subHeading!.textContent = `This will reset in ${timeLeft.hours}:${timeLeft.minutes}:${timeLeft.seconds}`;
        this.subHeading!.classList.remove("opacity-0");
      }

      private showResetButton() {
        this.resetButton!.classList.add("reset-active");
      }

      private resetProgress() {
        localStorage.removeItem(this.getStorageKey());
        window.location.reload();
      }

      init() {
        if (!this.isComplete) {
          this.container!.addEventListener("mousedown", () =>
            this.startHolding()
          );
          this.container!.addEventListener("mouseup", () => this.stopHolding());
          this.container!.addEventListener("mouseleave", () =>
            this.stopHolding()
          );

          this.container!.addEventListener("touchstart", (e) => {
            e.preventDefault();
            this.startHolding();
          });
          this.container!.addEventListener("touchend", () =>
            this.stopHolding()
          );
          this.container!.addEventListener("touchcancel", () =>
            this.stopHolding()
          );
        }
        this.resetButton!.addEventListener("click", () => this.resetProgress());
      }

      startHolding() {
        if (this.isComplete) return;

        this.isHolding = true;
        this.startTime = performance.now();
        this.lastMessageThreshold = 0;
        this.progressFill!.classList.add("progress-active");
        this.heading!.classList.add("opacity-0");
        this.subHeading!.classList.add("opacity-0");
        this.updateProgress();
      }

      stopHolding() {
        if (!this.isHolding) return;

        this.isHolding = false;
        if (this.animationFrame) {
          cancelAnimationFrame(this.animationFrame);
        }

        if (!this.isComplete) {
          this.progressClipRect!.setAttribute("y", "90");
          this.progressClipRect!.setAttribute("height", "0");
          this.progressFill!.classList.remove("progress-active");
          this.heading!.classList.remove("opacity-0");
          this.subHeading!.classList.remove("opacity-0");
          setTimeout(() => {
            this.heading!.textContent =
              "Have you completed your main task today?";
            this.subHeading!.textContent = "If yes, hold the checkbox.";
          }, 300);
        }
      }

      updateProgress() {
        if (!this.isHolding) return;

        const currentTime = performance.now();
        const elapsedTime = currentTime - this.startTime;
        const progress = Math.min(elapsedTime / HOLD_DURATION_MS, 1);
        const progressPercentage = Math.floor(progress * 100);

        // Update progress rectangle clip path
        const height = 80 * progress;
        const y = 90 - height;
        this.progressClipRect!.setAttribute("height", height.toString());
        this.progressClipRect!.setAttribute("y", y.toString());

        this.updateMessage(progressPercentage);

        if (progress >= 1) {
          this.complete();
        } else {
          this.animationFrame = requestAnimationFrame(() =>
            this.updateProgress()
          );
        }
      }

      updateMessage(progressPercentage: number) {
        for (const [threshold, message] of Object.entries(PROGRESS_MESSAGES)) {
          const numThreshold = parseInt(threshold);
          if (
            progressPercentage >= numThreshold &&
            numThreshold > this.lastMessageThreshold
          ) {
            this.lastMessageThreshold = numThreshold;
            this.heading!.textContent = message;
            this.heading!.classList.remove("opacity-0");
          }
        }
      }

      complete() {
        this.isComplete = true;
        this.isHolding = false;

        this.heading!.textContent = "Great job! Task completed! âœ¨";
        this.heading!.classList.remove("opacity-0");

        // Animate checkmark
        setTimeout(() => {
          this.checkmark!.classList.add("progress-active", "animate");
        }, 100);

        this.startTimer();
        this.showResetButton();
        triggerConfetti();
        this.saveState();
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      new ProgressCheckbox();
    });
  </script>
</Layout>
